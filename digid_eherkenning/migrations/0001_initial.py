# Generated by Django 3.2.15 on 2022-10-27 07:06

import uuid

import django.db.models.deletion
from django.db import migrations, models

import privates.fields
import privates.storages

import digid_eherkenning.models.digid_metadata_config


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("simple_certmanager", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="EherkenningMetadataConfiguration",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "idp_metadata_file",
                    privates.fields.PrivateMediaFileField(
                        help_text="The metadata file of the identity provider",
                        storage=privates.storages.PrivateMediaFileSystemStorage(),
                        upload_to="",
                        verbose_name="Identity Provider metadata file",
                    ),
                ),
                (
                    "idp_service_entity_id",
                    models.CharField(
                        help_text="Example value: 'https://was-preprod1.digid.nl/saml/idp/metadata'",
                        max_length=255,
                        verbose_name="Identity Provider service entity ID",
                    ),
                ),
                (
                    "want_assertions_signed",
                    models.BooleanField(
                        default=True,
                        help_text="If True, the XML assertions need to be signed, otherwise the whole response needs to be signed.",
                        max_length=100,
                        verbose_name="Want assertions signed",
                    ),
                ),
                (
                    "want_assertions_encrypted",
                    models.BooleanField(
                        default=False,
                        help_text="If True the XML assertions need to be encrypted.",
                        max_length=100,
                        verbose_name="Want assertions encrypted",
                    ),
                ),
                (
                    "key_passphrase",
                    models.CharField(
                        blank=True,
                        help_text="Passphrase for SOAP client",
                        max_length=100,
                        verbose_name="Key passphrase",
                    ),
                ),
                (
                    "signature_algorithm",
                    models.CharField(
                        blank=True,
                        default="http://www.w3.org/2000/09/xmldsig#rsa-sha1",
                        help_text="Signature algorithm",
                        max_length=100,
                        verbose_name="Signature algorithm",
                    ),
                ),
                (
                    "digest_algorithm",
                    models.CharField(
                        blank=True,
                        default="http://www.w3.org/2000/09/xmldsig#sha1",
                        help_text="Digest algorithm",
                        max_length=100,
                        verbose_name="Digest algorithm",
                    ),
                ),
                (
                    "entity_id",
                    models.CharField(
                        help_text="Service provider entity ID",
                        max_length=100,
                        verbose_name="Entity ID",
                    ),
                ),
                (
                    "base_url",
                    models.URLField(
                        help_text="Base URL of the application",
                        max_length=100,
                        verbose_name="Base URL",
                    ),
                ),
                (
                    "service_name",
                    models.CharField(
                        help_text="The name of the service for which DigiD login is required",
                        max_length=100,
                        verbose_name="Service name",
                    ),
                ),
                (
                    "service_description",
                    models.CharField(
                        help_text="A description of the service for which DigiD login is required",
                        max_length=100,
                        verbose_name="Service description",
                    ),
                ),
                (
                    "technical_contact_person_telephone",
                    models.CharField(
                        blank=True,
                        help_text="Telephone number of the technical person responsible for this DigiD setup. For it to be used, technical_contact_person_email should also be set.",
                        max_length=100,
                        verbose_name="Technical contact person telephone",
                    ),
                ),
                (
                    "technical_contact_person_email",
                    models.CharField(
                        blank=True,
                        help_text="Email address of the technical person responsible for this DigiD setup. For it to be used, technical_contact_person_telephone should also be set.",
                        max_length=100,
                        verbose_name="Technical contact person email",
                    ),
                ),
                (
                    "organization_url",
                    models.URLField(
                        blank=True,
                        help_text="URL of the organisation providing the service for which DigiD login is setup. For it to be used, also organization_name should be filled.",
                        max_length=100,
                        verbose_name="Organization URL",
                    ),
                ),
                (
                    "organization_name",
                    models.CharField(
                        blank=True,
                        help_text="Name of the organisation providing the service for which DigiD login is setup. For it to be used, also organization_url should be filled",
                        max_length=100,
                        verbose_name="Organization name",
                    ),
                ),
                (
                    "loa",
                    models.CharField(
                        blank=True,
                        default="urn:etoegang:core:assurance-class:loa3",
                        help_text="Level of Assurance (LoA) to use for all the services.",
                        max_length=100,
                        verbose_name="Loa",
                    ),
                ),
                (
                    "eh_attribute_consuming_service_index",
                    models.CharField(
                        blank=True,
                        default="9052",
                        help_text="Attribute consuming service index for the eHerkenning service",
                        max_length=100,
                        verbose_name="eHerkenning attribute consuming service index",
                    ),
                ),
                (
                    "eh_requested_attributes",
                    models.JSONField(
                        default=list,
                        help_text="A list of additional requested attributes. A single requested attribute can be a string (the name of the attribute) or an object with keys 'name' and 'required', where 'name' is a string and 'required' a boolean'.",
                        verbose_name="requested attributes",
                    ),
                ),
                (
                    "eh_service_uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        help_text="UUID of the eHerkenning service. Once entered into catalogues, changing the value is a manual process.",
                        verbose_name="eHerkenning service UUID",
                    ),
                ),
                (
                    "eh_service_instance_uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        help_text="UUID of the eHerkenning service instance. Once entered into catalogues, changing the value is a manual process.",
                        verbose_name="eHerkenning service UUID",
                    ),
                ),
                (
                    "eidas_attribute_consuming_service_index",
                    models.CharField(
                        blank=True,
                        default="9053",
                        help_text="Attribute consuming service index for the eHerkenning service",
                        max_length=100,
                        verbose_name="eidas attribute consuming service index",
                    ),
                ),
                (
                    "eidas_requested_attributes",
                    models.JSONField(
                        default=list,
                        help_text="A list of additional requested attributes. A single requested attribute can be a string (the name of the attribute) or an object with keys 'name' and 'required', where 'name' is a string and 'required' a boolean'.",
                        verbose_name="requested attributes",
                    ),
                ),
                (
                    "eidas_service_uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        help_text="UUID of the eHerkenning service. Once entered into catalogues, changing the value is a manual process.",
                        verbose_name="eIDAS service UUID",
                    ),
                ),
                (
                    "eidas_service_instance_uuid",
                    models.UUIDField(
                        default=uuid.uuid4,
                        help_text="UUID of the eHerkenning service instance. Once entered into catalogues, changing the value is a manual process.",
                        verbose_name="eIDAS service UUID",
                    ),
                ),
                (
                    "oin",
                    models.CharField(
                        help_text="The OIN of the company providing the service.",
                        max_length=100,
                        verbose_name="Oin",
                    ),
                ),
                (
                    "no_eidas",
                    models.BooleanField(
                        blank=True,
                        default=False,
                        help_text="If True, then the service catalogue will contain only the eHerkenning service.",
                        verbose_name="No eidas",
                    ),
                ),
                (
                    "privacy_policy",
                    models.URLField(
                        help_text="The URL where the privacy policy from the organisation providing the service can be found.",
                        max_length=100,
                        verbose_name="Privacy policy",
                    ),
                ),
                (
                    "makelaar_id",
                    models.CharField(
                        help_text="OIN of the broker used to set up eHerkenning/eIDAS.",
                        max_length=100,
                        verbose_name="Makelaar ID",
                    ),
                ),
                (
                    "artifact_resolve_content_type",
                    models.CharField(
                        default="application/soap+xml",
                        max_length=100,
                        verbose_name="resolve artifact binding content type",
                    ),
                ),
                (
                    "service_language",
                    models.CharField(
                        default="nl",
                        help_text="Metadata for eHerkenning/eidas will contain this language key",
                        max_length=2,
                        verbose_name="service language",
                    ),
                ),
                (
                    "certificate",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="simple_certmanager.certificate",
                    ),
                ),
            ],
            options={
                "verbose_name": "Eherkenning metadata configuration",
            },
        ),
        migrations.CreateModel(
            name="DigidMetadataConfiguration",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "idp_metadata_file",
                    privates.fields.PrivateMediaFileField(
                        help_text="The metadata file of the identity provider",
                        storage=privates.storages.PrivateMediaFileSystemStorage(),
                        upload_to="",
                        verbose_name="Identity Provider metadata file",
                    ),
                ),
                (
                    "idp_service_entity_id",
                    models.CharField(
                        help_text="Example value: 'https://was-preprod1.digid.nl/saml/idp/metadata'",
                        max_length=255,
                        verbose_name="Identity Provider service entity ID",
                    ),
                ),
                (
                    "want_assertions_signed",
                    models.BooleanField(
                        default=True,
                        help_text="If True, the XML assertions need to be signed, otherwise the whole response needs to be signed.",
                        max_length=100,
                        verbose_name="Want assertions signed",
                    ),
                ),
                (
                    "want_assertions_encrypted",
                    models.BooleanField(
                        default=False,
                        help_text="If True the XML assertions need to be encrypted.",
                        max_length=100,
                        verbose_name="Want assertions encrypted",
                    ),
                ),
                (
                    "key_passphrase",
                    models.CharField(
                        blank=True,
                        help_text="Passphrase for SOAP client",
                        max_length=100,
                        verbose_name="Key passphrase",
                    ),
                ),
                (
                    "signature_algorithm",
                    models.CharField(
                        blank=True,
                        default="http://www.w3.org/2000/09/xmldsig#rsa-sha1",
                        help_text="Signature algorithm",
                        max_length=100,
                        verbose_name="Signature algorithm",
                    ),
                ),
                (
                    "digest_algorithm",
                    models.CharField(
                        blank=True,
                        default="http://www.w3.org/2000/09/xmldsig#sha1",
                        help_text="Digest algorithm",
                        max_length=100,
                        verbose_name="Digest algorithm",
                    ),
                ),
                (
                    "entity_id",
                    models.CharField(
                        help_text="Service provider entity ID",
                        max_length=100,
                        verbose_name="Entity ID",
                    ),
                ),
                (
                    "base_url",
                    models.URLField(
                        help_text="Base URL of the application",
                        max_length=100,
                        verbose_name="Base URL",
                    ),
                ),
                (
                    "service_name",
                    models.CharField(
                        help_text="The name of the service for which DigiD login is required",
                        max_length=100,
                        verbose_name="Service name",
                    ),
                ),
                (
                    "service_description",
                    models.CharField(
                        help_text="A description of the service for which DigiD login is required",
                        max_length=100,
                        verbose_name="Service description",
                    ),
                ),
                (
                    "technical_contact_person_telephone",
                    models.CharField(
                        blank=True,
                        help_text="Telephone number of the technical person responsible for this DigiD setup. For it to be used, technical_contact_person_email should also be set.",
                        max_length=100,
                        verbose_name="Technical contact person telephone",
                    ),
                ),
                (
                    "technical_contact_person_email",
                    models.CharField(
                        blank=True,
                        help_text="Email address of the technical person responsible for this DigiD setup. For it to be used, technical_contact_person_telephone should also be set.",
                        max_length=100,
                        verbose_name="Technical contact person email",
                    ),
                ),
                (
                    "organization_url",
                    models.URLField(
                        blank=True,
                        help_text="URL of the organisation providing the service for which DigiD login is setup. For it to be used, also organization_name should be filled.",
                        max_length=100,
                        verbose_name="Organization URL",
                    ),
                ),
                (
                    "organization_name",
                    models.CharField(
                        blank=True,
                        help_text="Name of the organisation providing the service for which DigiD login is setup. For it to be used, also organization_url should be filled",
                        max_length=100,
                        verbose_name="Organization name",
                    ),
                ),
                (
                    "attribute_consuming_service_index",
                    models.CharField(
                        blank=True,
                        default="1",
                        help_text="Attribute consuming service index",
                        max_length=100,
                        verbose_name="Attribute consuming service index",
                    ),
                ),
                (
                    "requested_attributes",
                    models.JSONField(
                        default=digid_eherkenning.models.digid_metadata_config.default_digid_requested_attributes,
                        help_text="A list of strings (or objects) with the requested attributes, e.g. '[\"bsn\"]'",
                        verbose_name="requested attributes",
                    ),
                ),
                (
                    "slo",
                    models.BooleanField(
                        default=True,
                        help_text="If enabled, Single Logout is supported",
                        verbose_name="Single logout",
                    ),
                ),
                (
                    "certificate",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        to="simple_certmanager.certificate",
                    ),
                ),
            ],
            options={
                "verbose_name": "Digid metadata configuration",
            },
        ),
    ]
