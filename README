
An example of a metadata file of the digid idp which I found.

https://was-preprod1.digid.nl/saml/idp/metadata


Usage
=====

Add digid_eherkenning to the INSTALLED_APPS in your Django project's settings.py.

    INSTALLED_APPS = (
        "digid_eherkenning",
    )

Add digid_eherkenning.backends.DigiDBackend to the AUTHENTICATION_BACKENDS in your Django project's settings.py.

    AUTHENTICATION_BACKENDS = (
        "digid_eherkenning.backends.DigiDBackend"
    )

Add to the digid url patterns to urls.py

    url(r'^digid/', include("digid_eherkenning.digid_urls")),


Usage of mock login flow
========================

For development and demonstration purposes you can swap-in a mockup Digid login flow that accepts any BSN and doesn't require an actual DigiD metadata configuration.

In the login view username field you can enter any integer up to 9 digits (and a random password) to be used as the BSN in the authentication backend.

Swap the authentication backend for the mock version:

    AUTHENTICATION_BACKENDS = (
        "digid_eherkenning.backends.mock.DigiDBackend"
    )

Swap the digid url patterns for the mock version:

    url(r'^digid/', include("digid_eherkenning.mock.digid_urls")),

Additionally add the URLs for the mock IDP service to run in the same runserver instance:

    url(r'^digid/idp/', include("digid_eherkenning.mock.idp.digid_urls")),

For settings to control mock behaviour see digid_eherkenning/mock/config.py

Generating the DigiD metadata
=============================

The metadata for DigiD can be generated with the following command:

```bash
python manage.py generate_digid_metadata --want_assertions_encrypted --want_assertions_signed \
--key_file /path/test.key --cert_file /path/test.certificate \
--signature_algorithm "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" --digest_algorithm "http://www.w3.org/2001/04/xmlenc#sha256" \
--entity_id http://test-url.nl --base_url http://test-url.nl --service_name "Test name" \
--service_description "Test description" --attribute_consuming_service_index 9050 \
--technical_contact_person_telephone 06123123123 --technical_contact_person_email test@test.nl \
--organization_name "Test organisation" --organization_url http://test-organisation.nl
```

Generating eHerkenning/eIDAS metadata
=====================================

The metadata for eHerkenning and eIDAS can be generated with the following command:

```bash
python manage.py generate_eherkenning_metadata --want_assertions_encrypted --want_assertions_signed \
--key_file /path/test.key --cert_file /path/test.certificate \
--signature_algorithm "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256" --digest_algorithm "http://www.w3.org/2001/04/xmlenc#sha256" \
--entity_id http://test-url.nl --base_url http://test-url.nl --service_name "Test name" \
--service_description "Test description" --eh_attribute_consuming_service_index 9052 \
--eidas_attribute_consuming_service_index 9053 --oin 00000001112223330000 \
--technical_contact_person_telephone 06123123123 --technical_contact_person_email test@test.nl \
--organization_name "Test organisation" --organization_url http://test-organisation.nl
```

For information about each option, use

```bash
python manage.py generate_eherkenning_metadata --help
```


Other SAML2 implementations
===========================

A bunch of implementation which use PySAML2. None of them implement the artifact resolution protocol which we need for eHerkenning/DigiD

https://github.com/IronCountySchoolDistrict/django-python3-saml/blob/06d6198ed6c2b9ebfbfe4d6782715d91b6a468d8/django_python3_saml/views.py
https://github.com/knaperek/djangosaml2/blob/master/djangosaml2/views.py
https://github.com/fangli/django-saml2-auth/blob/master/django_saml2_auth/urls.py
https://github.com/OTA-Insight/djangosaml2idp/blob/master/djangosaml2idp/idp.py
https://github.com/IdentityPython/pysaml2/blob/master/example/sp-wsgi/sp.py
https://github.com/onelogin/python3-saml

References
==========

eHerkenningAttributverstrekking: https://afsprakenstelsel.etoegang.nl/display/as/Attribuutverstrekking
eHerkenningMetadata: https://afsprakenstelsel.etoegang.nl/display/as/DV+metadata+for+HM
eHerkenning: https://afsprakenstelsel.etoegang.nl/display/as/Interface+specifications+DV-HM
eHerkenningDC: https://afsprakenstelsel.etoegang.nl/display/as/Service+catalog
DigiD: https://www.logius.nl/sites/default/files/public/bestanden/diensten/DigiD/Koppelvlakspecificatie-SAML-DigiD.pdf
DigiDCheck: logius.nl/sites/default/files/bestanden/website/DigiD Checklist Testen v7.0 (definitief).pdf
SAML: http://www.oasis-open.org/committees/download.php/56776/sstc-saml-core-errata-2.0-wd-07.pdf
SAMLBind: https://www.oasis-open.org/committees/download.php/56779/sstc-saml-bindings-errata-2.0-wd-06.pdf
SAMLProf: https://www.oasis-open.org/committees/download.php/56782/sstc-saml-profiles-errata-2.0-wd-07.pdf
SAMLMeta: https://www.oasis-open.org/committees/download.php/56785/sstc-saml-metadata-errata-2.0-wd-05.pdf
XACML: https://docs.oasis-open.org/xacml/2.0/SAML-PROFILE/access_control-xacml-2.0-saml-profile-spec-os.html
